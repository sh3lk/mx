// Code generated by "mx generate". DO NOT EDIT.
//go:build !ignoreMXGen

package main

import (
	"context"
	"errors"
	"github.com/sh3lk/mx"
	"github.com/sh3lk/mx/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:      "github.com/sh3lk/mx/Main",
		Iface:     reflect.TypeOf((*mx.Main)(nil)).Elem(),
		Impl:      reflect.TypeOf(server{}),
		Listeners: []string{"reverser"},
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return main_local_stub{impl: impl.(mx.Main), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any { return main_client_stub{stub: stub} },
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return main_server_stub{impl: impl.(mx.Main), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return main_reflect_stub{caller: caller}
		},
		RefData: "⟦b78b74f4:MxEdge:github.com/sh3lk/mx/Main→github.com/sh3lk/mx/examples/reverser/Reverser⟧\n⟦7c420fb8:wEaVeRlIsTeNeRs:github.com/sh3lk/mx/Main→reverser⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "github.com/sh3lk/mx/examples/reverser/Reverser",
		Iface: reflect.TypeOf((*Reverser)(nil)).Elem(),
		Impl:  reflect.TypeOf(reverser{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return reverser_local_stub{impl: impl.(Reverser), tracer: tracer, reverseMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/sh3lk/mx/examples/reverser/Reverser", Method: "Reverse", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return reverser_client_stub{stub: stub, reverseMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/sh3lk/mx/examples/reverser/Reverser", Method: "Reverse", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return reverser_server_stub{impl: impl.(Reverser), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return reverser_reflect_stub{caller: caller}
		},
		RefData: "",
	})
}

// mx.InstanceOf checks.
var _ mx.InstanceOf[mx.Main] = (*server)(nil)
var _ mx.InstanceOf[Reverser] = (*reverser)(nil)

// mx.Router checks.
var _ mx.Unrouted = (*server)(nil)
var _ mx.Unrouted = (*reverser)(nil)

// Local stub implementations.

type main_local_stub struct {
	impl   mx.Main
	tracer trace.Tracer
}

// Check that main_local_stub implements the mx.Main interface.
var _ mx.Main = (*main_local_stub)(nil)

type reverser_local_stub struct {
	impl           Reverser
	tracer         trace.Tracer
	reverseMetrics *codegen.MethodMetrics
}

// Check that reverser_local_stub implements the Reverser interface.
var _ Reverser = (*reverser_local_stub)(nil)

func (s reverser_local_stub) Reverse(ctx context.Context, a0 string) (r0 string, err error) {
	// Update metrics.
	begin := s.reverseMetrics.Begin()
	defer func() { s.reverseMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.Reverser.Reverse", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Reverse(ctx, a0)
}

// Client stub implementations.

type main_client_stub struct {
	stub codegen.Stub
}

// Check that main_client_stub implements the mx.Main interface.
var _ mx.Main = (*main_client_stub)(nil)

type reverser_client_stub struct {
	stub           codegen.Stub
	reverseMetrics *codegen.MethodMetrics
}

// Check that reverser_client_stub implements the Reverser interface.
var _ Reverser = (*reverser_client_stub)(nil)

func (s reverser_client_stub) Reverse(ctx context.Context, a0 string) (r0 string, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.reverseMetrics.Begin()
	defer func() { s.reverseMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.Reverser.Reverse", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(mx.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(mx.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.String()
	err = dec.Error()
	return
}

// Note that "mx generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][24]struct{}](`

ERROR: You generated this file with 'mx generate' v0.24.7-0.20250401231336-b01860e0378a+dirty (codegen
version v0.24.0). The generated code is incompatible with the version of the
github.com/sh3lk/mx module that you're using. The mx module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/sh3lk/mx

We recommend updating the mx module and the 'mx generate' command by
running the following.

    go get github.com/sh3lk/mx@latest
    go install github.com/sh3lk/mx/cmd/mx@latest

Then, re-run 'mx generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/sh3lk/mx/issues.

`)

// Server stub implementations.

type main_server_stub struct {
	impl    mx.Main
	addLoad func(key uint64, load float64)
}

// Check that main_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*main_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s main_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	default:
		return nil
	}
}

type reverser_server_stub struct {
	impl    Reverser
	addLoad func(key uint64, load float64)
}

// Check that reverser_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*reverser_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s reverser_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Reverse":
		return s.reverse
	default:
		return nil
	}
}

func (s reverser_server_stub) reverse(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Reverse(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type main_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that main_reflect_stub implements the mx.Main interface.
var _ mx.Main = (*main_reflect_stub)(nil)

type reverser_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that reverser_reflect_stub implements the Reverser interface.
var _ Reverser = (*reverser_reflect_stub)(nil)

func (s reverser_reflect_stub) Reverse(ctx context.Context, a0 string) (r0 string, err error) {
	err = s.caller("Reverse", ctx, []any{a0}, []any{&r0})
	return
}
